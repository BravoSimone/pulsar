{"name":"Pulsar","tagline":"Manage your Capistrano deployments with ease","body":"# Pulsar\r\n\r\n[![Build Status](https://secure.travis-ci.org/nebulab/pulsar.png?branch=master)](http://travis-ci.org/nebulab/pulsar) \r\n[![Code Climate](https://codeclimate.com/badge.png)](https://codeclimate.com/github/nebulab/pulsar)\r\n\r\nPulsar is a little tool that helps with deploys. Its main purpose is building capfiles for [Capistrano](https://rubygems.org/gems/capistrano) \r\nto run. It makes it easy to manage a large number of apps via a separate configuration repository.\r\n\r\nSince we usually manage a lot of projects each with its own very special configuration, we got tired of copying-and-pasting\r\nCapistrano configurations around. A lot of people usually build a private gem with Capistrano recipes in it but we \r\nwanted more.\r\n\r\nPulsar lets you keep all your configurations on a private repo (containing all your configurations/recipes) for all your\r\nservers and apps. As long as you have read access to the repo you'll be able, through pulsar, to build a custom dynamic \r\nCapfile on which Capistrano is executed.\r\n\r\nThese are some of the benefits of this approach:\r\n\r\n* No need to pollute the apps with custom configurations\r\n* No need to have the app locally to deploy your application\r\n* It has multistage support by default\r\n* Everything you add to your \r\n* pes can be easily shared with every other app\r\n* Can easily be integrated with a web framework to provide easy 1-click deploys\r\n* Everything is structured so that you write the least code possible to deploy apps\r\n* You'll never have your eyes bleed on Capistrano output\r\n\r\nPulsar requires you, as a minimal configuration, to have the gem installed and store the configurations in a certain way\r\ninside a local directory or git repo. Pulsar will then use that repo to build temporary Capfiles.\r\n\r\n## Installation\r\n\r\nFor now pulsar lacks integration with other framworks. This means that the best way you can use it is standalone.\r\nYou can install it by running:\r\n\r\n```bash\r\ngem install pulsar\r\n```\r\n\r\n## Usage\r\n\r\nTo use pulsar you'll need a configuration repository with a certain dir/file structure. We don't have generators (yet)\r\nso we'll talk about the structure here.\r\n\r\n### Configurations repository\r\n\r\nThis is the required configuration repository layout:\r\n\r\n```bash\r\npulsar-conf/\r\n  |── Gemfile\r\n  ├── Gemfile.lock\r\n  ├── apps\r\n  │   ├── base.rb\r\n  │   └── my_application\r\n  │       ├── defaults.rb\r\n  │       ├── production.rb\r\n  │       ├── recipes\r\n  │       │   └── custom_recipe.rb\r\n  │       └── staging.rb\r\n  └── recipes\r\n      ├── generic\r\n      │   ├── cleanup.rb\r\n      │   ├── maintenance_mode.rb\r\n      │   ├── notify.rb\r\n      │   └── rake.rb\r\n      ├── rails\r\n      │   ├── asset_pipeline.rb\r\n      │   ├── create_database_yml.rb\r\n      │   ├── create_mongoid_yml.rb\r\n      │   ├── delayed_job.rb\r\n      │   ├── passenger.rb\r\n      │   ├── repair_permissions.rb\r\n      │   ├── symlink_configs.rb\r\n      │   ├── unicorn.rb\r\n      │   └── whenever.rb\r\n      └── spree_1\r\n          └── symlink_assets.rb\r\n```\r\n\r\nWhat pulsar does is use this configuration repository to build a Capfile file by appending the configurations as needed.\r\nThe `base.rb` file contains configurations that are shared between all the apps and it's prepended at the head of the Capfile.\r\nThe `apps/` directory contains configurations for your apps (no recipes as they're stored and included from the `recipes/` directory).\r\nThe `apps/my_application/recipes/` directory includes recipes which are automatically included in the Capfile (there \r\nare some apps that require a special \"dirty\" recipe).\r\nThe `apps/my_application/defaults.rb` file includes configuration shared between your app's stages.\r\nThe `recipes/` directory contains all your precious recipes. To include a recipe and actually use it you have to:\r\n\r\n* extend your `base.rb` with: `extend Pulsar::Helpers::Capistrano`\r\n* use the `load_recipes` method wherever you want inside the `apps/` directory\r\n\r\nAn example of the `load_recipes` method:\r\n\r\n```ruby\r\n#\r\n# Load default recipes\r\n#\r\nload_recipes do\r\n  generic :notify, :cleanup, :rake\r\nend\r\n```\r\n\r\nThis will load the recipes in `recipes/generic/notify.rb recipes/generic/cleanup.rb recipes/generic/rake.rb` by using\r\nCapistrano's `load` method.\r\n\r\nAfter you have your repository (I hope hosted somewhere safe), you can start using the `pulsar` command.\r\n\r\nPulsar currently supports two sub-commands: `cap` and `list`.\r\n\r\n### Cap command\r\n\r\nThe `cap` command is needed to (guess what) run Capistrano. The syntax will be a little different to that of Capistrano\r\nsince you're running it via `pulsar`.\r\nFor example, to see the list of tasks (like running `cap --tasks`) you have available you can run:\r\n\r\n```bash\r\npulsar cap -c gh_user/pulsar-conf my_app production --tasks\r\n```\r\n\r\nThat would result in pulsar fetching the `git@github.com:gh_user/pulsar-conf.git` repo (just the latest `HEAD` \r\nto preserve bandwidth) and building a Capfile on that looking for the configuration of `my_app` for stage `production`\r\nand then running `cap --tasks` on that Capfile.\r\n\r\nAs you can guess, you can append any kind of args to this command and it will execute it as if your're running `cap`\r\ninside your app.\r\n\r\nFor example to deploy a `my_app` in `production` you can run:\r\n\r\n```bash\r\npulsar cap -c gh_user/pulsar-conf my_app production\r\n```\r\n\r\nby default pulsar will assume you want to run the `deploy` Capistrano task.\r\n\r\n### List command\r\n\r\nThe `list` command will help you list the applications/environments you have configured. Running:\r\n\r\n```bash\r\npulsar list -c gh_user/pulsar-conf\r\n```\r\n\r\nwill output a list like this one:\r\n\r\n```bash\r\nmy_app: production, staging\r\nmy_other_app: staging\r\n```\r\n\r\n## Contributing\r\n\r\nPlease visit the [GitHub Project](https://github.com/nebulab/pulsar) for that.","google":"UA-25604808-7","note":"Don't delete this file! It's used internally to help with page regeneration."}