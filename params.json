{"name":"Pulsar","tagline":"Manage your Capistrano deployments with ease","body":"[![Gem Version](https://badge.fury.io/rb/pulsar.png)](http://badge.fury.io/rb/pulsar)\r\n[![Build Status](https://secure.travis-ci.org/nebulab/pulsar.png?branch=master)](http://travis-ci.org/nebulab/pulsar)\r\n[![Coverage Status](https://coveralls.io/repos/nebulab/pulsar/badge.png?branch=master)](https://coveralls.io/r/nebulab/pulsar)\r\n[![Code Climate](https://codeclimate.com/github/nebulab/pulsar.png)](https://codeclimate.com/github/nebulab/pulsar)\r\n\r\nPulsar is a little tool that helps with deploys. Its main purpose is building capfiles for [Capistrano](https://rubygems.org/gems/capistrano) \r\nto run. It makes it easy to manage a large number of apps via a separate configuration repository.\r\n\r\nSince we usually manage a lot of projects each with its own very special configuration, we got tired of copying-and-pasting\r\nCapistrano configurations around. A lot of people usually build a private gem with Capistrano recipes in it but we \r\nwanted more.\r\n\r\nPulsar lets you keep all your configurations on a private repo (containing all your configurations/recipes) for all your\r\nservers and apps. As long as you have read access to the repo you'll be able, through Pulsar, to build a custom dynamic \r\nCapfile on which Capistrano is executed.\r\n\r\nThese are some of the benefits of this approach:\r\n\r\n* No need to pollute the apps with custom configurations\r\n* No need to have the app locally to deploy your application\r\n* It has multistage support by default\r\n* Everything you add to your recipes can be easily shared with every other app\r\n* Can easily be integrated with a web framework to provide 1-click deploys\r\n* Everything is structured so that you write the least code possible to deploy apps\r\n\r\nPulsar requires, as a minimal configuration, the gem installed and your configurations stored inside a local directory or git repository. \r\nPulsar will then use that repo to build temporary Capfiles.\r\n\r\n## Installation\r\n\r\nPulsar can be used standalone or inside a `Rack` application installed via `Gemfile`.\r\n\r\nStandalone:\r\n\r\n```bash\r\ngem install pulsar\r\n```\r\n\r\nRack application (inside your Gemfile):\r\n\r\n```ruby\r\ngem 'pulsar', :require => false\r\n```\r\n\r\n## Usage\r\n\r\nTo use pulsar you'll need a configuration repository with a certain dir/file structure. The configurations can either be a plain directory or a git repository.\r\n\r\nAn initial folder structure can be obtained with the `pulsar-utils init` command. For example:\r\n\r\n```bash\r\n$ pulsar-utils init ~/Desktop/pulsar-conf\r\nYour starter configuration repo is in ~/Desktop/conf.\r\nRemember to run bundle install to add the needed Gemfile.lock.\r\n```\r\n\r\nYou'll have a template of a working configuration inside `~/Desktop/conf`. You'll just need to add your apps and recipes.\r\n\r\n### Configurations repository\r\n\r\nThis is the required configuration repository layout:\r\n\r\n```bash\r\npulsar-conf/\r\n  |── Gemfile\r\n  ├── Gemfile.lock\r\n  ├── apps\r\n  │   ├── base.rb\r\n  │   └── my_application\r\n  │       ├── defaults.rb\r\n  │       ├── production.rb\r\n  │       ├── recipes\r\n  │       │   └── custom_recipe.rb\r\n  │       └── staging.rb\r\n  └── recipes\r\n      ├── generic\r\n      │   ├── cleanup.rb\r\n      │   ├── maintenance_mode.rb\r\n      │   ├── notify.rb\r\n      │   └── rake.rb\r\n      ├── rails\r\n      │   ├── asset_pipeline.rb\r\n      │   ├── create_database_yml.rb\r\n      │   ├── create_mongoid_yml.rb\r\n      │   ├── delayed_job.rb\r\n      │   ├── passenger.rb\r\n      │   ├── repair_permissions.rb\r\n      │   ├── symlink_configs.rb\r\n      │   ├── unicorn.rb\r\n      │   └── whenever.rb\r\n      └── spree_1\r\n          └── symlink_assets.rb\r\n```\r\n\r\nWhat pulsar does is use this configuration repository to build a Capfile by appending the configurations as needed. Here is a list of the main files it uses:\r\n\r\n* The `base.rb` file contains configurations that are shared between all the apps.\r\n* The `apps/` directory contains configurations for your apps (no recipes as they're stored and included from the `recipes/` directory).\r\n* The `apps/my_application/recipes/` directory includes recipes which are automatically included in the Capfile (there are some apps that require a special \"dirty\" recipe).\r\n* The `apps/my_application/defaults.rb` file includes configuration shared between your app's stages.\r\n* The `recipes/` directory contains all your precious recipes. \r\n\r\nPulsar also provides a little helper that lets you easily load recipes from the `recipes/` directory without worrying about the actual recipe path. To use it you need to:\r\n\r\n* extend your `base.rb` file with: `extend Pulsar::Helpers::Capistrano`\r\n* use the `load_recipes` method wherever you want inside the `apps/` directory\r\n\r\nAn example of the `load_recipes` method:\r\n\r\n```ruby\r\n#\r\n# Load default recipes\r\n#\r\nload_recipes do\r\n  generic :cleanup, :rake\r\nend\r\n```\r\n\r\nThis will load the recipes in `recipes/generic/cleanup.rb recipes/generic/rake.rb` by using Capistrano's `load` method.\r\n\r\nAfter you have your repository (I hope hosted somewhere safe), you can start using the `pulsar` command.\r\n\r\nPulsar currently comes with two commands: `pulsar` and `pulsar-utils`.\r\n\r\n### pulsar command\r\n\r\nThe `pulsar` command is needed to run Capistrano. The syntax will be a little different to that of Capistrano since you're running it via `pulsar`.\r\n\r\nThis command can be used either \"standalone\" or from a \"Rack app\" directory.\r\n The main difference will be that you won't need to specify the application name for a Rack application because Pulsar will look for an app named as your current directory.\r\n\r\nFor example to deploy a `my_app` in `production` by using Pulsar by itself you can run:\r\n\r\n```bash\r\npulsar -c gh_user/pulsar-conf my_app production\r\n```\r\n\r\nThe same thing if you installed Pulsar in your Gemfile: \r\n\r\n```bash\r\n~/Code/my_app $ pulsar -c gh_user/pulsar-conf production\r\n```\r\n\r\nIf you wish to type even less to deploy an application you can set the `$PULSAR_CONF_REPO` environment variable to specify your configuration repository.\r\nJust put in your `.bashrc` or `.zshrc` file:\r\n\r\n```bash\r\nexport PULSAR_CONF_REPO=\"gh_user/pulsar-conf\"\r\n```\r\n\r\nThen to deploy an app in production the above command becomes:\r\n\r\n```bash\r\n~/Code/my_app $ pulsar production\r\n```\r\n\r\nThis is what Pulsar does when you run the `pulsar` command:\r\n\r\n1. fetch `git@github.com:gh_user/pulsar-conf.git` repo (just the latest `HEAD` to preserve bandwidth)\r\n2. use `cat` to append/prepend files from the configuration repo to build a Capfile with configurations for `my_app production`\r\n3. run `bundle install` to install all the dependencies you required via Gemfile\r\n4. run `cap` on that Capfile with whatever you passed as arguments to `pulsar` (it deaults to the `deploy` task)\r\n\r\nAs you can guess, you can append any kind of arguments to this command and it will execute it as if your're running `cap` inside your app.\r\nFor example, to see the list of tasks (like running `cap --tasks`) you have available you can run:\r\n\r\n```bash\r\npulsar -c gh_user/pulsar-conf my_app production --tasks\r\n```\r\n\r\nby default Pulsar will assume you want to run the `deploy` Capistrano task.\r\n\r\n### pulsar-utils command\r\n\r\nEverything which is not related to running Capistrano you can do it with the `pulsar-utils` command. This command\r\nhas the `list` and `init` subcommands.\r\n\r\n#### list subcommand\r\n\r\nThe `list` subcommand will help you list the applications/environments you have configured. Running:\r\n\r\n```bash\r\npulsar-utils list -c gh_user/pulsar-conf\r\n```\r\n\r\nwill output a list like this one:\r\n\r\n```bash\r\nmy_app: production, staging\r\nmy_other_app: staging\r\n```\r\n\r\n#### init subcommand\r\n\r\nThe `init` subcommand will help you get started with Pulsar by providing a basic directory structure for your configuration repo. If you run:\r\n\r\n```bash\r\npulsar-utils init ./my_path\r\n```\r\n\r\nPulsar will put a \"starter\" configuration repo inside `./my_path`. After that please remember that you need to:\r\n\r\n```bash\r\ncd ./my_path\r\nbundle install\r\n```\r\n\r\nto add a `Gemfile.lock` file. If you'd like to keep your configurations under revision control you should also proceed to init the repo with `git`.\r\n\r\n## Contributing\r\n\r\nPlease visit the [GitHub Project](https://github.com/nebulab/pulsar) for that.","google":"UA-25604808-7","note":"Don't delete this file! It's used internally to help with page regeneration."}