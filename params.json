{"name":"Pulsar","tagline":"Manage your Capistrano deployments with ease","body":"[![Gem Version](https://badge.fury.io/rb/pulsar.png)](http://badge.fury.io/rb/pulsar) [![Build Status](https://secure.travis-ci.org/nebulab/pulsar.png?branch=master)](http://travis-ci.org/nebulab/pulsar) [![Coverage Status](https://coveralls.io/repos/nebulab/pulsar/badge.png?branch=master)](https://coveralls.io/r/nebulab/pulsar) [![Code Climate](https://codeclimate.com/github/nebulab/pulsar.png)](https://codeclimate.com/github/nebulab/pulsar)\r\n\r\nThe easy [Capistrano](https://rubygems.org/gems/capistrano) deploy and configuration manager.\r\n\r\nPulsar allows you to run capistrano tasks via a separate repository where all your deploy configurations are stored.\r\nOnce you have your own repository, you can gradully add configurations and recipes so that you never have to duplicate code again.\r\n\r\nThe way Pulsar works means that you can deploy without actually having the application on your local machine (and neither\r\nhave all your application dependencies installed). This lets you integrate Pulsar with nearly any deploy strategy you can think of.\r\n\r\nSome of the benefits of using Pulsar:\r\n* No capistrano configurations in the application code\r\n* No need to have the application locally to deploy\r\n* Multistage support by default\r\n* Every recipe can be shared between all applications\r\n* Can easily be integrated with other tools\r\n* Write the least possible code to deploy\r\n\r\n## Installation\r\n\r\nThe most useful way of installing Pulsar is as a system gem:\r\n\r\n```bash\r\n$ gem install pulsar\r\n```\r\n\r\nThis will install two commands: `pulsar` and `pulsar-utils`. The first command is required to run capistrano,\r\nthe other is for everything else.\r\n\r\n---\r\n\r\nYou'll need to create your own configuration repo:\r\n\r\n```bash\r\n$ pulsar-utils init ~/Desktop/pulsar-conf\r\n```\r\n\r\nThis will create a basic start point for building your configuration repository. As soon as you're done configuring\r\nyou should consider storing this folder as an actual git repository.\r\n\r\nHere it is possible to see how this configuration repository will look like: [Pulsar Conf Demo](http://github.com/nebulab/pulsar-conf-demo) \r\n\r\n**NOTE**: Pulsar only supports git and *nix systems.\r\n\r\n## Configuration\r\n\r\nThis is an example repository configuration layout:\r\n\r\n```bash\r\npulsar-conf/\r\n  |── Gemfile\r\n  ├── Gemfile.lock\r\n  ├── apps\r\n  │   ├── base.rb\r\n  │   └── my_application\r\n  │       ├── defaults.rb\r\n  │       ├── production.rb\r\n  │       ├── recipes\r\n  │       │   └── custom_recipe.rb\r\n  │       └── staging.rb\r\n  └── recipes\r\n      ├── generic\r\n      │   ├── cleanup.rb\r\n      │   ├── maintenance_mode.rb\r\n      │   ├── notify.rb\r\n      │   └── rake.rb\r\n      ├── rails\r\n      │   ├── passenger.rb\r\n      │   ├── repair_permissions.rb\r\n      │   ├── symlink_configs.rb\r\n      │   ├── unicorn.rb\r\n      │   └── whenever.rb\r\n      └── spree_1\r\n          └── symlink_assets.rb\r\n```\r\n\r\nPulsar uses these files to build capistrano configurations on the fly, depending on how you invoke the `pulsar` command.\r\nSince Pulsar it's basically a capistrano wrapper, the content of these files is plain old capistrano syntax.\r\n\r\n### _apps_ directory\r\n\r\nThis directory contains your application configurations. You'll have one directory per application.\r\n\r\n* `base.rb` has configurations that are shared by all applications\r\n* `my_application/defaults.rb` includes configuration shared by every stage of the application\r\n* `my_application/staging.rb` and `my_application/production.rb` files include stage configurations\r\n* `my_application/recipes/` are recipes that are always included for that application (no need to use `load_recipes`)\r\n\r\n### _recipes_ directory\r\n\r\nThis directory contains your recipes. You can create any number of directories to organize your recipes.\r\nTo load a recipe from your configurations you can use the `load_recipes` helper:\r\n\r\n```ruby\r\n#\r\n# Somewhere inside apps/\r\n#\r\nload_recipes do\r\n  rails :repair_permissions, :unicorn\r\n  generic :cleanup, :rake\r\nend\r\n```\r\n\r\nThis will use capistrano's `load` method to include recipes from `rails/` and `generic/`.\r\n\r\n---\r\n\r\nAnother way to include your recipes is by using the `Gemfile`. Many gems already include custom recipes for capistrano so\r\nyou just need to require those. An example with [Whenever](https://github.com/javan/whenever):\r\n\r\n```ruby\r\n#\r\n# Inside Gemfile\r\n#\r\ngem 'whenever'\r\n\r\n#\r\n# Inside recipes/rails/whenever.rb\r\n#\r\nrequire 'whenever/capistrano'\r\n\r\nset :whenever_command, \"bundle exec whenever\"\r\n\r\n#\r\n# Somewhere inside apps/\r\n#\r\nload_recipes do\r\n  rails :whenever\r\nend\r\n```\r\n\r\n---\r\n\r\nYou can specify some recipes to be loaded only when you run Pulsar from inside a Rack application directory.\r\nThis is useful with recipes that require something inside that directory (like retrieving the database/assets\r\nfrom a staging environment). \r\n\r\nYou can do that like this:\r\n\r\n```ruby\r\n#\r\n# Somewhere inside apps/\r\n#\r\n\r\n#\r\n# These recipes will be available only if you're running \r\n# Pulsar inside a Rack application (like Rails) directory\r\n#\r\nload_recipes(only_app: true) do\r\n  rails :assets_pull, :database_pull\r\nend\r\n```\r\n\r\n### Loading the repository\r\n\r\nOnce the repository is ready, you'll need to tell Pulsar where it is. The repository location can be specified either\r\nas a full git path or a github repository path (`gh-user/pulsar-conf`).\r\n\r\nSince Pulsar requires the repository for everything, there are multiple ways to store this information so that \r\nyou don't have to type it everytime.\r\n\r\nYou have three possibilities:\r\n\r\n* `-c` command line option\r\n* `PULSAR_CONF_REPO` environment variable\r\n* `~/.pulsar` configuration file\r\n\r\nThe fastest way is probably the `.pulsar` hidden file inside your home directory:\r\n\r\n```bash\r\n#\r\n# Inside ~/.pulsar\r\n#\r\nPULSAR_CONF_REPO=\"gh-user/pulsar-conf\" \r\n\r\n#\r\n# Also supported\r\n#\r\n# PULSAR_CONF_REPO=\"git://github.com/gh-user/pulsar-conf.git\"\r\n```\r\n\r\nPulsar will read this file and set the environment variables properly.\r\n\r\n---\r\n\r\nIf you don't want to add another file to your home directory you can export the variables yourself:\r\n\r\n```bash\r\n#\r\n# Inside ~/.bash_profile or ~/.zshrc\r\n#\r\nexport PULSAR_CONF_REPO=\"gh-user/pulsar-conf\" \r\n```\r\n\r\n## Usage\r\n\r\nAfter the repository is ready, running Pulsar is straightforward. To deploy `my_application` to `production`:\r\n\r\n```bash\r\n$ pulsar my_application production\r\n```\r\n\r\nAs a rule of thumb, anything that's added at the end of the command is passed to capistrano. Some examples:\r\n\r\n```bash\r\n$ pulsar my_application production --tasks\r\n\r\n$ pulsar my_application staging deploy:migrations\r\n\r\n$ pulsar my_application staging shell\r\n\r\n#\r\n# Deploy multiple apps by using commas \r\n#\r\n$ pulsar my_app1,my_app2,my_app3 production\r\n```\r\n\r\n### Running inside a Rack application (e.g. Ruby on Rails application)\r\n\r\nIn case you frequently work from a Rack application and would like a workflow similar to that of capistrano, Pulsar\r\nsupports running from inside a Rack application directory. If you use this a lot, you should consider installing\r\nPulsar via the application `Gemfile`.\r\n\r\nWhen deploying from inside a Rack application you can omit the application name:\r\n\r\n```bash\r\n$ cd /path/to/my_application\r\n\r\n$ pulsar production\r\n\r\n$ pulsar staging deploy:migrations\r\n```\r\n\r\n---\r\n\r\nIf you need a particular configuration for an application you can store a `.pulsar` file inside the application\r\ndirectory:\r\n\r\n```bash\r\n#\r\n# Inside /path/to/my_application/.pulsar\r\n#\r\nPULSAR_CONF_REPO=\"gh-user/pulsar-conf\"\r\n\r\n#\r\n# If the application directory name is different than what\r\n# you configured inside the Pulsar configuration repository\r\n#\r\n# PULSAR_APP_NAME=\"my-application\"\r\n```\r\n\r\n## Integrations\r\n\r\nPulsar is easy to integrate, you just need access to the configurations repository and the ability to\r\nrun a command.\r\n\r\n### Hubot\r\n\r\nhttps://gist.github.com/mtylty/5324075\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes with tests (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"UA-25604808-7","note":"Don't delete this file! It's used internally to help with page regeneration."}