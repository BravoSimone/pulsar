#!/usr/bin/env ruby

require 'pulsar'

class PulsarCommand < Clamp::Command
  include Pulsar::Helpers::Clamp

  option [ "-v", "--verbose" ], :flag,
                                "Print out all the things!!!",
                                :default => false

  option [ "-k", "--keep-capfile" ], :flag, 
                                     "Dont't remove the generated capfile in the /tmp/ directory.",
                                     :default => false

  option [ "-l", "--log-level" ], "LOG LEVEL",
                                  "How much output will Capistrano spit out. Can be any of: important, info, debug.",
                                  :default => "important"

  option [ "-c", "--conf-repo" ], "REPO URL",
                                  "A git repository with deploy configurations, mainly apps and recipes.",
                                  :required => true

  option [ "-b", "--conf-branch" ], "REPO BRANCH",
                                    "Specify a branch for the configuration repository.",
                                    :default => "master"

  parameter "APPLICATION", "The application which you would like to deploy. For example: nebulab"
  parameter "ENVIRONMENT", "The environment on which you would like to deploy. For example: production" do |env|
    %w(production staging development).include?(env) ? env : raise(ArgumentError)
  end
  parameter "[TASKS] ...", "The tasks that will be passed to the final `cap` command. For example: --tasks, deploy, deploy:check", :default => "deploy"

  def execute
    target = "#{application}:#{environment}"

    Bundler.with_clean_env do
      fetch_repo
      bundle_install
      create_capfile
      build_capfile(target)

      cap_args = [tasks_list].flatten.join(" ")
      run_capistrano(cap_args)

      remove_capfile unless keep_capfile?
      remove_repo
    end
  end
end

PulsarCommand.run
